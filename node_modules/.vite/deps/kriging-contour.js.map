{
  "version": 3,
  "sources": ["../../d3-array/src/ascending.js", "../../d3-array/src/bisector.js", "../../d3-array/src/bisect.js", "../../d3-array/src/extent.js", "../../d3-array/src/array.js", "../../d3-array/src/range.js", "../../d3-array/src/ticks.js", "../../d3-array/src/threshold/sturges.js", "../../kriging-contour/node_modules/d3-contour/src/array.js", "../../kriging-contour/node_modules/d3-contour/src/ascending.js", "../../kriging-contour/node_modules/d3-contour/src/area.js", "../../kriging-contour/node_modules/d3-contour/src/constant.js", "../../kriging-contour/node_modules/d3-contour/src/contains.js", "../../kriging-contour/node_modules/d3-contour/src/noop.js", "../../kriging-contour/node_modules/d3-contour/src/contours.js", "../../kriging-contour/src/kriging.js", "../../kriging-contour/src/index.js"],
  "sourcesContent": ["export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n", "import ascending from \"./ascending\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n", "import ascending from \"./ascending\";\nimport bisector from \"./bisector\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n", "export default function(values, valueof) {\n  var n = values.length,\n      i = -1,\n      value,\n      min,\n      max;\n\n  if (valueof == null) {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = values[i]) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = values[i]) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  else {\n    while (++i < n) { // Find the first comparable value.\n      if ((value = valueof(values[i], i, values)) != null && value >= value) {\n        min = max = value;\n        while (++i < n) { // Compare the remaining values.\n          if ((value = valueof(values[i], i, values)) != null) {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    }\n  }\n\n  return [min, max];\n}\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n", "export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n", "var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n", "export default function(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n", "var array = Array.prototype;\n\nexport var slice = array.slice;\n", "export default function(a, b) {\n  return a - b;\n}\n", "export default function(ring) {\n  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];\n  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];\n  return area;\n}\n", "export default function(x) {\n  return function() {\n    return x;\n  };\n}\n", "export default function(ring, hole) {\n  var i = -1, n = hole.length, c;\n  while (++i < n) if (c = ringContains(ring, hole[i])) return c;\n  return 0;\n}\n\nfunction ringContains(ring, point) {\n  var x = point[0], y = point[1], contains = -1;\n  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {\n    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];\n    if (segmentContains(pi, pj, point)) return 0;\n    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;\n  }\n  return contains;\n}\n\nfunction segmentContains(a, b, c) {\n  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);\n}\n\nfunction collinear(a, b, c) {\n  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);\n}\n\nfunction within(p, q, r) {\n  return p <= q && q <= r || r <= q && q <= p;\n}\n", "export default function() {}\n", "import {extent, thresholdSturges, tickStep, range} from \"d3-array\";\nimport {slice} from \"./array\";\nimport ascending from \"./ascending\";\nimport area from \"./area\";\nimport constant from \"./constant\";\nimport contains from \"./contains\";\nimport noop from \"./noop\";\n\nvar cases = [\n  [],\n  [[[1.0, 1.5], [0.5, 1.0]]],\n  [[[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [0.5, 1.0]]],\n  [[[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],\n  [[[1.0, 0.5], [1.0, 1.5]]],\n  [[[1.0, 0.5], [0.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 0.5]]],\n  [[[1.0, 1.5], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],\n  [[[1.5, 1.0], [1.0, 0.5]]],\n  [[[0.5, 1.0], [1.5, 1.0]]],\n  [[[1.0, 1.5], [1.5, 1.0]]],\n  [[[0.5, 1.0], [1.0, 1.5]]],\n  []\n];\n\nexport default function() {\n  var dx = 1,\n      dy = 1,\n      threshold = thresholdSturges,\n      smooth = smoothLinear;\n\n  function contours(values) {\n    var tz = threshold(values);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      var domain = extent(values), start = domain[0], stop = domain[1];\n      tz = tickStep(start, stop, tz);\n      tz = range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);\n    } else {\n      tz = tz.slice().sort(ascending);\n    }\n\n    return tz.map(function(value) {\n      return contour(values, value);\n    });\n  }\n\n  // Accumulate, smooth contour rings, assign holes to exterior rings.\n  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js\n  function contour(values, value) {\n    var polygons = [],\n        holes = [];\n\n    isorings(values, value, function(ring) {\n      smooth(ring, values, value);\n      if (area(ring) > 0) polygons.push([ring]);\n      else holes.push(ring);\n    });\n\n    holes.forEach(function(hole) {\n      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {\n        if (contains((polygon = polygons[i])[0], hole) !== -1) {\n          polygon.push(hole);\n          return;\n        }\n      }\n    });\n\n    return {\n      type: \"MultiPolygon\",\n      value: value,\n      coordinates: polygons\n    };\n  }\n\n  // Marching squares with isolines stitched into rings.\n  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js\n  function isorings(values, value, callback) {\n    var fragmentByStart = new Array,\n        fragmentByEnd = new Array,\n        x, y, t0, t1, t2, t3;\n\n    // Special case for the first row (y = -1, t2 = t3 = 0).\n    x = y = -1;\n    t1 = values[0] >= value;\n    cases[t1 << 1].forEach(stitch);\n    while (++x < dx - 1) {\n      t0 = t1, t1 = values[x + 1] >= value;\n      cases[t0 | t1 << 1].forEach(stitch);\n    }\n    cases[t1 << 0].forEach(stitch);\n\n    // General case for the intermediate rows.\n    while (++y < dy - 1) {\n      x = -1;\n      t1 = values[y * dx + dx] >= value;\n      t2 = values[y * dx] >= value;\n      cases[t1 << 1 | t2 << 2].forEach(stitch);\n      while (++x < dx - 1) {\n        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;\n        t3 = t2, t2 = values[y * dx + x + 1] >= value;\n        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);\n      }\n      cases[t1 | t2 << 3].forEach(stitch);\n    }\n\n    // Special case for the last row (y = dy - 1, t0 = t1 = 0).\n    x = -1;\n    t2 = values[y * dx] >= value;\n    cases[t2 << 2].forEach(stitch);\n    while (++x < dx - 1) {\n      t3 = t2, t2 = values[y * dx + x + 1] >= value;\n      cases[t2 << 2 | t3 << 3].forEach(stitch);\n    }\n    cases[t2 << 3].forEach(stitch);\n\n    function stitch(line) {\n      var start = [line[0][0] + x, line[0][1] + y],\n          end = [line[1][0] + x, line[1][1] + y],\n          startIndex = index(start),\n          endIndex = index(end),\n          f, g;\n      if (f = fragmentByEnd[startIndex]) {\n        if (g = fragmentByStart[endIndex]) {\n          delete fragmentByEnd[f.end];\n          delete fragmentByStart[g.start];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};\n          }\n        } else {\n          delete fragmentByEnd[f.end];\n          f.ring.push(end);\n          fragmentByEnd[f.end = endIndex] = f;\n        }\n      } else if (f = fragmentByStart[endIndex]) {\n        if (g = fragmentByEnd[startIndex]) {\n          delete fragmentByStart[f.start];\n          delete fragmentByEnd[g.end];\n          if (f === g) {\n            f.ring.push(end);\n            callback(f.ring);\n          } else {\n            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};\n          }\n        } else {\n          delete fragmentByStart[f.start];\n          f.ring.unshift(start);\n          fragmentByStart[f.start = startIndex] = f;\n        }\n      } else {\n        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};\n      }\n    }\n  }\n\n  function index(point) {\n    return point[0] * 2 + point[1] * (dx + 1) * 4;\n  }\n\n  function smoothLinear(ring, values, value) {\n    ring.forEach(function(point) {\n      var x = point[0],\n          y = point[1],\n          xt = x | 0,\n          yt = y | 0,\n          v0,\n          v1 = values[yt * dx + xt];\n      if (x > 0 && x < dx && xt === x) {\n        v0 = values[yt * dx + xt - 1];\n        point[0] = x + (value - v0) / (v1 - v0) - 0.5;\n      }\n      if (y > 0 && y < dy && yt === y) {\n        v0 = values[(yt - 1) * dx + xt];\n        point[1] = y + (value - v0) / (v1 - v0) - 0.5;\n      }\n    });\n  }\n\n  contours.contour = contour;\n\n  contours.size = function(_) {\n    if (!arguments.length) return [dx, dy];\n    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);\n    if (!(_0 > 0) || !(_1 > 0)) throw new Error(\"invalid size\");\n    return dx = _0, dy = _1, contours;\n  };\n\n  contours.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;\n  };\n\n  contours.smooth = function(_) {\n    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;\n  };\n\n  return contours;\n}\n", "import {contours as d3_contours} from 'd3-contour';\r\n\r\n//\u6570\u7EC4\u6700\u5927\u503C\r\nArray.prototype.max = function () {\r\n\treturn Math.max.apply(null, this);\r\n};\r\n//\u6570\u7EC4\u6700\u5C0F\u503C\r\nArray.prototype.min = function () {\r\n\treturn Math.min.apply(null, this);\r\n};\r\n//\u6570\u7EC4\u5E73\u5747\u503C\r\nArray.prototype.mean = function () {\r\n\tvar i,\r\n\tsum;\r\n\tfor (i = 0, sum = 0; i < this.length; i++)\r\n\t\tsum += this[i];\r\n\treturn sum / this.length;\r\n};\r\n\r\n//\u5C06\u6570\u7EC4\u7B2C\u4E00\u9879\u53D6\u51FA\u4E3Av\uFF0C\u751F\u6210\u957F\u5EA6\u4E3An\u7684\u6570\u7EC4\uFF0C\u6BCF\u4E2A\u6570\u7EC4item\u4E3Av\r\nArray.prototype.rep = function (n) {\r\n\tvar arrayn = new Array(n);\r\n\tvar v = this[0];\r\n\tfor (var i = 0; i < n; i++) {\r\n\t\tarrayn[i] = v;\r\n\t}\r\n\treturn arrayn;\r\n};\r\n\r\nArray.prototype.pip = function (x, y) {\r\n\tvar i,\r\n\tj,\r\n\tc = false;\r\n\tfor (i = 0, j = this.length - 1; i < this.length; j = i++) {\r\n\t\tif (((this[i][1] > y) != (this[j][1] > y)) &&\r\n\t\t\t(x < (this[j][0] - this[i][0]) * (y - this[i][1]) / (this[j][1] - this[i][1]) + this[i][0])) {\r\n\t\t\tc = !c;\r\n\t\t}\r\n\t}\r\n\treturn c;\r\n}\r\n\r\n// Matrix algebra\r\nfunction kriging_matrix_diag(c, n) {\r\n\tvar i,\r\n\tZ = [0].rep(n * n);\r\n\tfor (i = 0; i < n; i++)\r\n\t\tZ[i * n + i] = c;\r\n\treturn Z;\r\n};\r\nfunction kriging_matrix_transpose(X, n, m) {\r\n\tvar i,\r\n\tj,\r\n\tZ = Array(m * n);\r\n\tfor (i = 0; i < n; i++)\r\n\t\tfor (j = 0; j < m; j++)\r\n\t\t\tZ[j * n + i] = X[i * m + j];\r\n\treturn Z;\r\n};\r\nfunction kriging_matrix_scale(X, c, n, m) {\r\n\tvar i,\r\n\tj;\r\n\tfor (i = 0; i < n; i++)\r\n\t\tfor (j = 0; j < m; j++)\r\n\t\t\tX[i * m + j] *= c;\r\n};\r\nfunction kriging_matrix_add(X, Y, n, m) {\r\n\tvar i,\r\n\tj,\r\n\tZ = Array(n * m);\r\n\tfor (i = 0; i < n; i++)\r\n\t\tfor (j = 0; j < m; j++)\r\n\t\t\tZ[i * m + j] = X[i * m + j] + Y[i * m + j];\r\n\treturn Z;\r\n};\r\n// Naive matrix multiplication\r\nfunction kriging_matrix_multiply(X, Y, n, m, p) {\r\n\tvar i,\r\n\tj,\r\n\tk,\r\n\tZ = Array(n * p);\r\n\tfor (i = 0; i < n; i++) {\r\n\t\tfor (j = 0; j < p; j++) {\r\n\t\t\tZ[i * p + j] = 0;\r\n\t\t\tfor (k = 0; k < m; k++)\r\n\t\t\t\tZ[i * p + j] += X[i * m + k] * Y[k * p + j];\r\n\t\t}\r\n\t}\r\n\treturn Z;\r\n};\r\n// Cholesky decomposition\r\nfunction kriging_matrix_chol(X, n) {\r\n\tvar i,\r\n\tj,\r\n\tk,\r\n\tsum,\r\n\tp = Array(n);\r\n\tfor (i = 0; i < n; i++)\r\n\t\tp[i] = X[i * n + i];\r\n\tfor (i = 0; i < n; i++) {\r\n\t\tfor (j = 0; j < i; j++)\r\n\t\t\tp[i] -= X[i * n + j] * X[i * n + j];\r\n\t\tif (p[i] <= 0)\r\n\t\t\treturn false;\r\n\t\tp[i] = Math.sqrt(p[i]);\r\n\t\tfor (j = i + 1; j < n; j++) {\r\n\t\t\tfor (k = 0; k < i; k++)\r\n\t\t\t\tX[j * n + i] -= X[j * n + k] * X[i * n + k];\r\n\t\t\tX[j * n + i] /= p[i];\r\n\t\t}\r\n\t}\r\n\tfor (i = 0; i < n; i++)\r\n\t\tX[i * n + i] = p[i];\r\n\treturn true;\r\n};\r\n// Inversion of cholesky decomposition\r\nfunction kriging_matrix_chol2inv(X, n) {\r\n\tvar i,\r\n\tj,\r\n\tk,\r\n\tsum;\r\n\tfor (i = 0; i < n; i++) {\r\n\t\tX[i * n + i] = 1 / X[i * n + i];\r\n\t\tfor (j = i + 1; j < n; j++) {\r\n\t\t\tsum = 0;\r\n\t\t\tfor (k = i; k < j; k++)\r\n\t\t\t\tsum -= X[j * n + k] * X[k * n + i];\r\n\t\t\tX[j * n + i] = sum / X[j * n + j];\r\n\t\t}\r\n\t}\r\n\tfor (i = 0; i < n; i++)\r\n\t\tfor (j = i + 1; j < n; j++)\r\n\t\t\tX[i * n + j] = 0;\r\n\tfor (i = 0; i < n; i++) {\r\n\t\tX[i * n + i] *= X[i * n + i];\r\n\t\tfor (k = i + 1; k < n; k++)\r\n\t\t\tX[i * n + i] += X[k * n + i] * X[k * n + i];\r\n\t\tfor (j = i + 1; j < n; j++)\r\n\t\t\tfor (k = j; k < n; k++)\r\n\t\t\t\tX[i * n + j] += X[k * n + i] * X[k * n + j];\r\n\t}\r\n\tfor (i = 0; i < n; i++)\r\n\t\tfor (j = 0; j < i; j++)\r\n\t\t\tX[i * n + j] = X[j * n + i];\r\n\r\n};\r\n// Inversion via gauss-jordan elimination\r\nfunction kriging_matrix_solve(X, n) {\r\n\tvar m = n;\r\n\tvar b = Array(n * n);\r\n\tvar indxc = Array(n);\r\n\tvar indxr = Array(n);\r\n\tvar ipiv = Array(n);\r\n\tvar i,\r\n\ticol,\r\n\tirow,\r\n\tj,\r\n\tk,\r\n\tl,\r\n\tll;\r\n\tvar big,\r\n\tdum,\r\n\tpivinv,\r\n\ttemp;\r\n\r\n\tfor (i = 0; i < n; i++)\r\n\t\tfor (j = 0; j < n; j++) {\r\n\t\t\tif (i == j)\r\n\t\t\t\tb[i * n + j] = 1;\r\n\t\t\telse\r\n\t\t\t\tb[i * n + j] = 0;\r\n\t\t}\r\n\tfor (j = 0; j < n; j++)\r\n\t\tipiv[j] = 0;\r\n\tfor (i = 0; i < n; i++) {\r\n\t\tbig = 0;\r\n\t\tfor (j = 0; j < n; j++) {\r\n\t\t\tif (ipiv[j] != 1) {\r\n\t\t\t\tfor (k = 0; k < n; k++) {\r\n\t\t\t\t\tif (ipiv[k] == 0) {\r\n\t\t\t\t\t\tif (Math.abs(X[j * n + k]) >= big) {\r\n\t\t\t\t\t\t\tbig = Math.abs(X[j * n + k]);\r\n\t\t\t\t\t\t\tirow = j;\r\n\t\t\t\t\t\t\ticol = k;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t++(ipiv[icol]);\r\n\r\n\t\tif (irow != icol) {\r\n\t\t\tfor (l = 0; l < n; l++) {\r\n\t\t\t\ttemp = X[irow * n + l];\r\n\t\t\t\tX[irow * n + l] = X[icol * n + l];\r\n\t\t\t\tX[icol * n + l] = temp;\r\n\t\t\t}\r\n\t\t\tfor (l = 0; l < m; l++) {\r\n\t\t\t\ttemp = b[irow * n + l];\r\n\t\t\t\tb[irow * n + l] = b[icol * n + l];\r\n\t\t\t\tb[icol * n + l] = temp;\r\n\t\t\t}\r\n\t\t}\r\n\t\tindxr[i] = irow;\r\n\t\tindxc[i] = icol;\r\n\r\n\t\tif (X[icol * n + icol] == 0)\r\n\t\t\treturn false; // Singular\r\n\r\n\t\tpivinv = 1 / X[icol * n + icol];\r\n\t\tX[icol * n + icol] = 1;\r\n\t\tfor (l = 0; l < n; l++)\r\n\t\t\tX[icol * n + l] *= pivinv;\r\n\t\tfor (l = 0; l < m; l++)\r\n\t\t\tb[icol * n + l] *= pivinv;\r\n\r\n\t\tfor (ll = 0; ll < n; ll++) {\r\n\t\t\tif (ll != icol) {\r\n\t\t\t\tdum = X[ll * n + icol];\r\n\t\t\t\tX[ll * n + icol] = 0;\r\n\t\t\t\tfor (l = 0; l < n; l++)\r\n\t\t\t\t\tX[ll * n + l] -= X[icol * n + l] * dum;\r\n\t\t\t\tfor (l = 0; l < m; l++)\r\n\t\t\t\t\tb[ll * n + l] -= b[icol * n + l] * dum;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\tfor (l = (n - 1); l >= 0; l--)\r\n\t\tif (indxr[l] != indxc[l]) {\r\n\t\t\tfor (k = 0; k < n; k++) {\r\n\t\t\t\ttemp = X[k * n + indxr[l]];\r\n\t\t\t\tX[k * n + indxr[l]] = X[k * n + indxc[l]];\r\n\t\t\t\tX[k * n + indxc[l]] = temp;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\treturn true;\r\n}\r\n\r\n// Variogram models\r\nfunction kriging_variogram_gaussian(h, nugget, range, sill, A) {\r\n\treturn nugget + ((sill - nugget) / range) *\r\n\t(1.0 - Math.exp( - (1.0 / A) * Math.pow(h / range, 2)));\r\n};\r\nfunction kriging_variogram_exponential(h, nugget, range, sill, A) {\r\n\treturn nugget + ((sill - nugget) / range) *\r\n\t(1.0 - Math.exp( - (1.0 / A) * (h / range)));\r\n};\r\nfunction kriging_variogram_spherical(h, nugget, range, sill, A) {\r\n\tif (h > range)\r\n\t\treturn nugget + (sill - nugget) / range;\r\n\treturn nugget + ((sill - nugget) / range) *\r\n\t(1.5 * (h / range) - 0.5 * Math.pow(h / range, 3));\r\n};\r\n\r\nvar kriging = {\r\n\r\n};\r\n\r\n\r\n\r\n\r\n// Train using gaussian processes with bayesian priors\r\nkriging.train = function (t, x, y, model, sigma2, alpha) {\r\n\tvar variogram = {\r\n\t\tt : t,\r\n\t\tx : x,\r\n\t\ty : y,\r\n\t\tnugget : 0.0,\r\n\t\trange : 0.0,\r\n\t\tsill : 0.0,\r\n\t\tA : 1 / 3,\r\n\t\tn : 0\r\n\t};\r\n\tswitch (model) {\r\n\tcase \"gaussian\":\r\n\t\tvariogram.model = kriging_variogram_gaussian;\r\n\t\tbreak;\r\n\tcase \"exponential\":\r\n\t\tvariogram.model = kriging_variogram_exponential;\r\n\t\tbreak;\r\n\tcase \"spherical\":\r\n\t\tvariogram.model = kriging_variogram_spherical;\r\n\t\tbreak;\r\n\t};\r\n\r\n\t// Lag distance/semivariance\r\n\tvar i,\r\n\tj,\r\n\tk,\r\n\tl,\r\n\tn = t.length;\r\n\tvar distance = Array((n * n - n) / 2);\r\n\tfor (i = 0, k = 0; i < n; i++)\r\n\t\tfor (j = 0; j < i; j++, k++) {\r\n\t\t\tdistance[k] = Array(2);\r\n\t\t\tdistance[k][0] = Math.pow(\r\n\t\t\t\t\tMath.pow(x[i] - x[j], 2) +\r\n\t\t\t\t\tMath.pow(y[i] - y[j], 2), 0.5);\r\n\t\t\tdistance[k][1] = Math.abs(t[i] - t[j]);\r\n\t\t}\r\n\tdistance.sort(function (a, b) {\r\n\t\treturn a[0] - b[0];\r\n\t});\r\n\tvariogram.range = distance[(n * n - n) / 2 - 1][0];\r\n\r\n\t// Bin lag distance\r\n\tvar lags = ((n * n - n) / 2) > 30 ? 30 : (n * n - n) / 2;\r\n\tvar tolerance = variogram.range / lags;\r\n\tvar lag = [0].rep(lags);\r\n\tvar semi = [0].rep(lags);\r\n\tif (lags < 30) {\r\n\t\tfor (l = 0; l < lags; l++) {\r\n\t\t\tlag[l] = distance[l][0];\r\n\t\t\tsemi[l] = distance[l][1];\r\n\t\t}\r\n\t} else {\r\n\t\tfor (i = 0, j = 0, k = 0, l = 0; i < lags && j < ((n * n - n) / 2); i++, k = 0) {\r\n\t\t\twhile (distance[j][0] <= ((i + 1) * tolerance)) {\r\n\t\t\t\tlag[l] += distance[j][0];\r\n\t\t\t\tsemi[l] += distance[j][1];\r\n\t\t\t\tj++;\r\n\t\t\t\tk++;\r\n\t\t\t\tif (j >= ((n * n - n) / 2))\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tif (k > 0) {\r\n\t\t\t\tlag[l] /= k;\r\n\t\t\t\tsemi[l] /= k;\r\n\t\t\t\tl++;\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (l < 2)\r\n\t\t\treturn variogram; // Error: Not enough points\r\n\t}\r\n\r\n\t// Feature transformation\r\n\tn = l;\r\n\tvariogram.range = lag[n - 1] - lag[0];\r\n\tvar X = [1].rep(2 * n);\r\n\tvar Y = Array(n);\r\n\tvar A = variogram.A;\r\n\tfor (i = 0; i < n; i++) {\r\n\t\tswitch (model) {\r\n\t\tcase \"gaussian\":\r\n\t\t\tX[i * 2 + 1] = 1.0 - Math.exp( - (1.0 / A) * Math.pow(lag[i] / variogram.range, 2));\r\n\t\t\tbreak;\r\n\t\tcase \"exponential\":\r\n\t\t\tX[i * 2 + 1] = 1.0 - Math.exp( - (1.0 / A) * lag[i] / variogram.range);\r\n\t\t\tbreak;\r\n\t\tcase \"spherical\":\r\n\t\t\tX[i * 2 + 1] = 1.5 * (lag[i] / variogram.range) -\r\n\t\t\t\t0.5 * Math.pow(lag[i] / variogram.range, 3);\r\n\t\t\tbreak;\r\n\t\t};\r\n\t\tY[i] = semi[i];\r\n\t}\r\n\r\n\t// Least squares\r\n\tvar Xt = kriging_matrix_transpose(X, n, 2);\r\n\tvar Z = kriging_matrix_multiply(Xt, X, 2, n, 2);\r\n\tZ = kriging_matrix_add(Z, kriging_matrix_diag(1 / alpha, 2), 2, 2);\r\n\tvar cloneZ = Z.slice(0);\r\n\tif (kriging_matrix_chol(Z, 2))\r\n\t\tkriging_matrix_chol2inv(Z, 2);\r\n\telse {\r\n\t\tkriging_matrix_solve(cloneZ, 2);\r\n\t\tZ = cloneZ;\r\n\t}\r\n\tvar W = kriging_matrix_multiply(kriging_matrix_multiply(Z, Xt, 2, 2, n), Y, 2, n, 1);\r\n\r\n\t// Variogram parameters\r\n\tvariogram.nugget = W[0];\r\n\tvariogram.sill = W[1] * variogram.range + variogram.nugget;\r\n\tvariogram.n = x.length;\r\n\r\n\t// Gram matrix with prior\r\n\tn = x.length;\r\n\tvar K = Array(n * n);\r\n\tfor (i = 0; i < n; i++) {\r\n\t\tfor (j = 0; j < i; j++) {\r\n\t\t\tK[i * n + j] = variogram.model(Math.pow(Math.pow(x[i] - x[j], 2) +\r\n\t\t\t\t\t\tMath.pow(y[i] - y[j], 2), 0.5),\r\n\t\t\t\t\tvariogram.nugget,\r\n\t\t\t\t\tvariogram.range,\r\n\t\t\t\t\tvariogram.sill,\r\n\t\t\t\t\tvariogram.A);\r\n\t\t\tK[j * n + i] = K[i * n + j];\r\n\t\t}\r\n\t\tK[i * n + i] = variogram.model(0, variogram.nugget,\r\n\t\t\t\tvariogram.range,\r\n\t\t\t\tvariogram.sill,\r\n\t\t\t\tvariogram.A);\r\n\t}\r\n\r\n\t// Inverse penalized Gram matrix projected to target vector\r\n\tvar C = kriging_matrix_add(K, kriging_matrix_diag(sigma2, n), n, n);\r\n\tvar cloneC = C.slice(0);\r\n\tif (kriging_matrix_chol(C, n))\r\n\t\tkriging_matrix_chol2inv(C, n);\r\n\telse {\r\n\t\tkriging_matrix_solve(cloneC, n);\r\n\t\tC = cloneC;\r\n\t}\r\n\r\n\t// Copy unprojected inverted matrix as K\r\n\tvar K = C.slice(0);\r\n\tvar M = kriging_matrix_multiply(C, t, n, n, 1);\r\n\tvariogram.K = K;\r\n\tvariogram.M = M;\r\n\r\n\treturn variogram;\r\n};\r\n\r\n// Model prediction\r\nkriging.predict = function (x, y, variogram) {\r\n\tvar i,\r\n\tk = Array(variogram.n);\r\n\tfor (i = 0; i < variogram.n; i++)\r\n\t\tk[i] = variogram.model(Math.pow(Math.pow(x - variogram.x[i], 2) +\r\n\t\t\t\t\tMath.pow(y - variogram.y[i], 2), 0.5),\r\n\t\t\t\tvariogram.nugget, variogram.range,\r\n\t\t\t\tvariogram.sill, variogram.A);\r\n\treturn kriging_matrix_multiply(k, variogram.M, 1, variogram.n, 1)[0];\r\n};\r\nkriging.variance = function (x, y, variogram) {\r\n\tvar i,\r\n\tk = Array(variogram.n);\r\n\tfor (i = 0; i < variogram.n; i++)\r\n\t\tk[i] = variogram.model(Math.pow(Math.pow(x - variogram.x[i], 2) +\r\n\t\t\t\t\tMath.pow(y - variogram.y[i], 2), 0.5),\r\n\t\t\t\tvariogram.nugget, variogram.range,\r\n\t\t\t\tvariogram.sill, variogram.A);\r\n\treturn variogram.model(0, variogram.nugget, variogram.range,\r\n\t\tvariogram.sill, variogram.A) +\r\n\tkriging_matrix_multiply(kriging_matrix_multiply(k, variogram.K,\r\n\t\t\t1, variogram.n, variogram.n),\r\n\t\tk, 1, variogram.n, 1)[0];\r\n};\r\n\r\n// \u751F\u6210\u514B\u91CC\u91D1grid\r\nkriging.getGridInfo = function (bbox,variogram,width) {\r\n\tvar grid = [];\r\n\t//x\u65B9\u5411\r\n\tvar xlim=[bbox[0],bbox[2]];\r\n\tvar ylim=[bbox[1],bbox[3]];\r\n\tvar zlim=[variogram.t.min(), variogram.t.max()];\r\n\t\r\n\t//xy\u65B9\u5411\u5730\u7406\u8DE8\u5EA6\r\n\tvar geoX_width=xlim[1]-xlim[0];\r\n\tvar geoY_width=ylim[1]-ylim[0];\r\n\r\n\t//\u5982\u679Cx_width\u8BBE\u7F6E\uFF0C\u521D\u59CB\u57FA\u4E8E200\u8BA1\u7B97\u3002\r\n\tlet x_width,y_width;\r\n\tif(!width)\r\n\t\tx_width=200;\r\n\telse\r\n\t\tx_width=Math.ceil(width);\r\n\t//\u8BA9\u56FE\u50CF\u7684xy\u6BD4\u4F8B\u4E0E\u5730\u7406\u7684xy\u6BD4\u4F8B\u4FDD\u6301\u4E00\u81F4\r\n\ty_width=Math.ceil(x_width/(geoX_width/geoY_width));\r\n\r\n\t//\u5730\u7406\u8DE8\u5EA6/\u56FE\u50CF\u8DE8\u5EA6=\u5F53\u524D\u5730\u56FE\u56FE\u4E0A\u5206\u8FA8\u7387\r\n\tvar x_resolution=geoX_width*1.0/x_width;\r\n\tvar y_resolution=geoY_width*1.0/y_width;\r\n\t\r\n\tvar xtarget,ytarget;\r\n\r\n\tfor (let j = 0; j < y_width; j++) {\r\n\t\tfor (let k =0; k <x_width; k++) {\r\n\t\t\txtarget = bbox[0] + k * x_resolution;\r\n\t\t\tytarget = bbox[1] + j * y_resolution;\r\n\t\t\tgrid.push(kriging.predict(xtarget, ytarget, variogram));\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tgrid : grid,\r\n\t\tn : x_width,\r\n\t\tm : y_width,\r\n\t\txlim : xlim,\r\n\t\tylim : ylim,\r\n\t\tzlim : zlim,\r\n\t\tx_resolution:x_resolution,\r\n\t\ty_resolution:y_resolution\r\n\r\n\t};\r\n};\r\n\r\n\r\n//\u514B\u91CC\u91D1\u751F\u6210\u77E2\u91CF\u7B49\u503C\u9762\r\nkriging.getVectorContour = function (gridInfo, breaks) {\r\n\t//\u50CF\u7D20\u5750\u6807\u7CFB\u7684\u7B49\u503C\u9762\r\n\tvar _contours = d3_contours()\r\n\t\t.size([gridInfo.n, gridInfo.m])\r\n\t\t.thresholds(breaks)\r\n\t\t(gridInfo.grid);\r\n\t//\u50CF\u7D20\u5750\u6807\u7CFB\u6362\u7B97\u5730\u7406\u5750\u6807\u7CFB\r\n\tlet dataset = {\r\n\t\t\"type\" : \"FeatureCollection\",\r\n\t\t\"features\" : []\r\n\t};\r\n\tvar geoX_width=gridInfo.xlim[1]-gridInfo.xlim[0];\r\n\tvar geoY_width=gridInfo.ylim[1]-gridInfo.ylim[0];\r\n\t_contours.forEach(contour => {\r\n\t\t\tcontour.coordinates.forEach(polygon => {\r\n\t\t\t\t\t\t//polygon\u5206\u5185\u73AF\u548C\u5916\u73AF\r\n\t\t\t\t\t\tlet _polygon = polygon.map(ring => {\r\n\t\t\t\t\t\t\t\t\tlet _ring = ring.map(function (coor) {\r\n\t\t\t\t\t\t\t\t\t\t//\u50CF\u7D20\u5750\u6807\u8F6C\u5730\u7406\u5750\u6807\r\n\t\t\t\t\t\t\t\t\t\tlet lon = gridInfo.xlim[0] + geoX_width * (coor[0]*1.0 / gridInfo.n);\r\n\t\t\t\t\t\t\t\t\t\tlet lat = gridInfo.ylim[0] + geoY_width * (coor[1]*1.0 / gridInfo.m);\r\n\t\t\t\t\t\t\t\t\t\treturn [lon,lat];\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\treturn _ring;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\tdataset.features.push({\r\n\t\t\t\t\t\t\t\"type\" : \"Feature\",\r\n\t\t\t\t\t\t\t\"properties\" : {\r\n\t\t\t\t\t\t\t\t\"contour_value\" : contour.value\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\"geometry\" : {\r\n\t\t\t\t\t\t\t\t\"type\" : \"Polygon\",\r\n\t\t\t\t\t\t\t\t\"coordinates\" : _polygon\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\treturn dataset;\r\n};\r\n//\u514B\u91CC\u91D1\u751F\u6210canvas\u56FE\u50CF\r\n kriging.drawCanvasContour = function(gridInfo,canvas,xlim,ylim,colors) {\r\n\t//\u6E05\u7A7A\u753B\u5E03\r\n\tvar ctx = canvas.getContext(\"2d\");\r\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\r\n\t//\u5F00\u59CB\u8FB9\u754C\r\n\tvar range = [xlim[1]-xlim[0], ylim[1]-ylim[0], gridInfo.zlim[1]-gridInfo.zlim[0]];\r\n\tvar n = gridInfo.n;\r\n\tvar m = gridInfo.m;\r\n\t//\u6839\u636E\u5206\u8FA8\u7387\uFF0C\u8BA1\u7B97\u6BCF\u4E2A\u8272\u5757\u7684\u5BBD\u9AD8\r\n\tvar wx = Math.ceil(gridInfo.x_resolution*canvas.width/(xlim[1]-xlim[0]));\r\n\tvar wy = Math.ceil(gridInfo.y_resolution*canvas.height/(ylim[1]-ylim[0]));\r\n\r\n\tfor(let i=0;i<m;i++)\r\n\t    for(let j=0;j<n;j++) {\r\n\t\t\tlet _index=i*n+j;\r\n\t\t\tif(gridInfo.grid[_index]==undefined) \r\n\t\t\t\tcontinue;\r\n\t\t\tlet x = canvas.width*(j*gridInfo.x_resolution+gridInfo.xlim[0]-xlim[0])/range[0];\r\n\t\t\tlet y = canvas.height*(1-(i*gridInfo.y_resolution+gridInfo.ylim[0]-ylim[0])/range[1]);\r\n\t\t\tlet z = (gridInfo.grid[_index]-gridInfo.zlim[0])/range[2];\r\n\t\t\tif(z<0.0) \r\n\t\t\t\tz = 0.0;\r\n\t\t\telse if(z>1.0) \r\n\t\t\t\tz = 1.0;\r\n\t\t\tctx.fillStyle = colors[Math.floor((colors.length-1)*z)];\r\n\t\t\tctx.fillRect(Math.round(x-wx/2), Math.round(y-wy/2), wx, wy);\r\n\t    }\r\n\t};\r\n\r\nexport {kriging};\r\n", "import {kriging} from './kriging';\r\n\r\nfunction _getKrigingGridInfo(featureCollection,weight,krigingParams){\r\n    //\u5148\u83B7\u53D6featureCollection\u7684bbox\r\n    let values=[],lons=[],lats=[];\r\n    let extent=[100000000,100000000,-100000000,-100000000];\r\n    featureCollection.features.forEach(feature => {\r\n        //\u63D0\u53D6\u63D2\u503C\u6743\u91CD\u5B57\u6BB5\uFF0C\u51C6\u5907\u514B\u91CC\u91D1\u63D2\u503C\u4F7F\u7528\r\n        values.push(feature.properties[weight]);\r\n        lons.push(feature.geometry.coordinates[0]);\r\n        lats.push(feature.geometry.coordinates[1]);\r\n        if(extent[0]>feature.geometry.coordinates[0])\r\n            extent[0]=feature.geometry.coordinates[0];\r\n        if(extent[1]>feature.geometry.coordinates[1])\r\n            extent[1]=feature.geometry.coordinates[1];\r\n        if(extent[2]<feature.geometry.coordinates[0])\r\n            extent[2]=feature.geometry.coordinates[0];\r\n        if(extent[3]<feature.geometry.coordinates[1])\r\n            extent[3]=feature.geometry.coordinates[1];\r\n    });\r\n    let variogram=kriging.train(values,lons,lats,krigingParams.model,krigingParams.sigma2,krigingParams.alpha);\r\n    let gridinfo=kriging.getGridInfo(extent,variogram,200);\r\n    return gridinfo;\r\n}\r\n\r\n  \r\n/*\r\n* \u514B\u91CC\u91D1\u751F\u6210\u77E2\u91CF\u7B49\u503C\u9762\uFF0C\u6D4F\u89C8\u5668\u548Cnode\u90FD\u53EF\u4EE5\u4F7F\u7528\r\n* @param {json} featureCollection\uFF1A\u5FC5\u586B\uFF0C\u5DF2\u6709\u70B9\u6570\u636E\uFF0Cgeojson\u683C\u5F0F\r\n* @param {string} weight\uFF1A\u5FC5\u586B\uFF0C\u63D2\u503C\u6240\u4F9D\u8D56\u7684\u5708\u4E2D\u5B57\u6BB5\r\n* @param {object) krigingParams\uFF1A\u5FC5\u586B\uFF0C\u514B\u91CC\u91D1\u63D2\u503C\u7B97\u6CD5\u53C2\u6570\u8BBE\u7F6E\r\n    krigingParams:{\r\n         krigingModel:'exponential','gaussian','spherical'\uFF0C\u4E09\u9009\u4E00\r\n         krigingSigma2:\r\n         krigingAlpha:\r\n    }\r\n* @param {array} breaks\uFF1A\u5FC5\u586B\uFF0C\u7B49\u503C\u9762\u5206\u7EA7\u533A\u95F4\r\n*/\r\nfunction getVectorContour(featureCollection,weight,krigingParams,breaks){\r\n    let gridinfo=_getKrigingGridInfo(featureCollection,weight,krigingParams);\r\n    let vectorContour=kriging.getVectorContour(gridinfo,breaks);\r\n    return vectorContour;\r\n};\r\n\r\n/*\r\n* \u514B\u91CC\u91D1\u751F\u6210\u6805\u683C\u7B49\u503C\u9762\u5E76\u7ED8\u5236\u5230canvas\u4E0A\uFF0C\u4EC5\u6D4F\u89C8\u5668\u4E2D\u4F7F\u7528\r\n* @param {json} featureCollection\uFF1A\u5FC5\u586B\uFF0C\u5DF2\u6709\u70B9\u6570\u636E\uFF0Cgeojson\u683C\u5F0F\r\n* @param {string} weight\uFF1A\u5FC5\u586B\uFF0C\u63D2\u503C\u6240\u4F9D\u8D56\u7684\u5708\u4E2D\u5B57\u6BB5\r\n* @param {object) krigingParams\uFF1A\u5FC5\u586B\uFF0C\u514B\u91CC\u91D1\u63D2\u503C\u7B97\u6CD5\u53C2\u6570\u8BBE\u7F6E\r\n    krigingParams:{\r\n         krigingModel:'exponential','gaussian','spherical'\uFF0C\u4E09\u9009\u4E00\r\n         krigingSigma2:\r\n         krigingAlpha:\r\n    }\r\n* @param {dom) canvas\uFF1A\u5FC5\u586B\uFF0C\u7ED1\u5B9A\u6E32\u67D3\u7684canvas dom\r\n* @param {array) colors\uFF1A\u5FC5\u586B\uFF0C\u7B49\u503C\u9762\u5206\u7EA7\u533A\u95F4\r\n*/\r\nfunction drawCanvasContour(featureCollection,weight,krigingParams,canvas,xlim,ylim,colors) {\r\n\tlet gridinfo=_getKrigingGridInfo(featureCollection,weight,krigingParams);\r\n    kriging.drawCanvasContour(gridinfo,canvas,xlim,ylim,colors);\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport {getVectorContour,drawCanvasContour};"],
  "mappings": "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",
  "names": ["array", "slice", "ascending_default", "constant_default", "ascending_default", "constant_default", "slice"]
}
